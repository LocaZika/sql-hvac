
CREATE DOMAIN USERS.PHONE_TYPE AS VARCHAR(20) NOT NULL CHECK (VALUE ~ '^\+?[(\+)?[0-9\s\-]+$');

CREATE DOMAIN USERS.EMAIL_TYPE AS VARCHAR(30) NOT NULL CHECK (VALUE ~ '^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

CREATE TYPE USERS.USER_ROLES AS ENUM('admin', 'ceo', 'manager', 'employee');

CREATE TABLE USERS.EMPLOYEES(
	ID SMALLINT GENERATED ALWAYS AS IDENTITY,
	EMAIL USERS.EMAIL_TYPE,
	PASSWORD TEXT NOT NULL,
	PHONE USERS.PHONE_TYPE,
	NAME VARCHAR(50) NOT NULL,
	ADDRESS TEXT NOT NULL,
	ROLE USERS.USER_ROLES NOT NULL DEFAULT 'employee',
	CREATED_AT DATE NOT NULL DEFAULT CURRENT_DATE,
	UPDATED_AT DATE NOT NULL DEFAULT CURRENT_DATE,
	CONSTRAINT PK_EMP_ID PRIMARY KEY (ID, CREATED_AT)
) PARTITION BY RANGE (CREATED_AT);

DROP TABLE USERS.EMPLOYEES;

CREATE TABLE EMP_2024 PARTITION OF USERS.EMPLOYEES FOR VALUES FROM ('01-01-2024') TO ('31-12-2024');
CREATE TABLE EMP_OTHERS PARTITION OF USERS.EMPLOYEES DEFAULT;

INSERT INTO USERS.EMPLOYEES(EMAIL, PASSWORD, PHONE, NAME, ADDRESS, ROLE) VALUES ('admin@mail.com', 'admin', '0123456789', 'admin', 'VN', 'admin');

---SET UPDATE TIME---
CREATE FUNCTION USERS.SET_UPDATED_AT_CAR_FUNC()
RETURNS TRIGGER AS $$
BEGIN
	NEW.UPDATED_AT = CURRENT_TIMESTAMP;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER SET_UPDATED_AT_TRIGGER
BEFORE UPDATE ON USERS.EMPLOYEES
FOR EACH ROW EXECUTE PROCEDURE USERS.SET_UPDATED_AT_FUNC();
---------------------

SELECT * FROM USERS.EMPLOYEES;





