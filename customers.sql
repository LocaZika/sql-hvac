---CREATE USERS SCHEMA---
CREATE SCHEMA CUSTOMER;
---CREATE USER DEFINED DATA TYPE---
CREATE DOMAIN PHONE_TYPE AS VARCHAR(20) NOT NULL CHECK (VALUE ~ '^\+?[(\+)?[0-9\s\-]+$');

CREATE DOMAIN EMAIL_TYPE AS VARCHAR(30) NOT NULL CHECK (VALUE ~ '^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

---CREATE CUSTOMER TABLE---
CREATE TABLE CUSTOMER.CUSTOMERS(
	ID INT GENERATED ALWAYS AS IDENTITY,
	EMAIL EMAIL_TYPE,
	PASSWORD TEXT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	PHONE PHONE_TYPE,
	CREATED_AT DATE NOT NULL DEFAULT CURRENT_DATE,
	CONSTRAINT PK_CUSTOMER_ID_CREATED_AT PRIMARY KEY (ID, CREATED_AT),
	CONSTRAINT UNI_CUSTOMER_ID UNIQUE (ID, CREATED_AT)
) PARTITION BY RANGE (CREATED_AT);

INSERT INTO CUSTOMER.CUSTOMERS(EMAIL, PASSWORD, NAME, PHONE) VALUES ('admin@mail.com', '123', 'admin', '015348975');
TRUNCATE TABLE CUSTOMER.CUSTOMERS;

DROP TABLE CUSTOMER.CUSTOMERS;

CREATE TABLE CUSTOMERS_2024 PARTITION OF CUSTOMER.CUSTOMERS FOR VALUES FROM ('01-01-2024') TO ('31-12-2024');
CREATE TABLE CUSTOMERS_DEFAULT PARTITION OF CUSTOMER.CUSTOMERS DEFAULT;

---FUNCTION GENERATE PARTITION TABLE BY CREATED_AT---
CREATE FUNCTION CUSTOMER.CREATE_CUSTOMERS_PARTITION_TABLE()
RETURNS VOID
AS $$
DECLARE
	YEAR_OF_CURRENT_DATE SMALLINT;
	PARTITION_NAME TEXT;
BEGIN
	YEAR_OF_CURRENT_DATE := EXTRACT(YEAR FROM CURRENT_DATE);
	PARTITION_NAME := 'customers_' || YEAR_OF_CURRENT_DATE;
	EXECUTE FORMAT('
		CREATE TABLE %I PARTITION OF CUSTOMER.CUSTOMERS FOR VALUES FROM (%L) TO (%L)
	', PARTITION_NAME, '01-01-' || YEAR_OF_CURRENT_DATE, '31-12-' || YEAR_OF_CURRENT_DATE);
END;
$$ LANGUAGE PLPGSQL;

SELECT CUSTOMER.CREATE_CUSTOMERS_PARTITION_TABLE();

---CREATE INDEXES---
CREATE INDEX IDX_CUSTOMER_ID ON CUSTOMER.CUSTOMERS(_ID);

CREATE INDEX IDX_CUSTOMER_EMAIL_PASSWORD ON CUSTOMER.CUSTOMERS(EMAIL, PASSWORD);

---CREATE TRIGGER FUNCTION TO CHECK UNIQUE ON EMAIL OR PHONE---
CREATE FUNCTION CHECK_UNIQUE_EMAIL_PHONE()
RETURNS TRIGGER AS $$
BEGIN
	IF EXISTS(
		SELECT 1 FROM CUSTOMER.CUSTOMERS WHERE EMAIL = NEW.EMAIL OR PHONE = NEW.PHONE
	) THEN RAISE EXCEPTION 'Email or Phone was existed!';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

DROP FUNCTION CHECK_UNIQUE_EMAIL_PHONE;

---CREATE TRIGGER ON ALL PARTITION---
CREATE TRIGGER CHECK_EMAIL_PHONE_TRIGGER
BEFORE INSERT OR UPDATE ON CUSTOMER.CUSTOMERS
FOR EACH ROW EXECUTE FUNCTION CHECK_UNIQUE_EMAIL_PHONE();

SELECT * FROM CUSTOMER.CUSTOMERS;





